### Make backup root
### Copy subfolder
### Build vanish check


make_backuptree()
{
# check folder exists and it is a folder
# create folder/date (check does not exists)
ls -l
}

copy_parentfolders()
{
# separate folders from string
# check not vanished
# copy folders attribute

ls -l
}

move_file()
{
# Backup file
 local LOCAL_ROOTFOLDER_SOURCE="$1"
 local LOCAL_FILE_SOURCE="$2"
 local LOCAL_ROOTFOLDER_DESTINATION="$3"

 /bin/mv "$LOCAL_FOLDER_SOURCE" "$LOCAL_FOLDER_DESTINATION"
}

move_tree()
{
# Beackup tree
 local LOCAL_ROOTFOLDER_SOURCE="$1"
 local LOCAL_FOLDER_SOURCE="$2"
 local LOCAL_ROOTFOLDER_DESTINATION="$3"

 /bin/mv "$LOCAL_FOLDER_SOURCE" "$LOCAL_FOLDER_DESTINATION"
}

copy_folderattribute()
{
# Copy folder attributes
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FOLDER_DESTINATION="$2"

 /bin/touch --reference="$LOCAL_FOLDER_SOURCE" "$LOCAL_FOLDER_DESTINATION"
 /bin/chmod --reference="$LOCAL_FOLDER_SOURCE" "$LOCAL_FOLDER_DESTINATION"
 /bin/chown --reference="$LOCAL_FOLDER_SOURCE" "$LOCAL_FOLDER_DESTINATION"
 /usr/bin/getfacl -p "$LOCAL_FOLDER_SOURCE" | /usr/bin/setfacl --set-file=- "$LOCAL_FOLDER_DESTINATION"
}

copy_file()
{
# New file creation
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FILENAME_SOURCE="$2"
 local LOCAL_FOLDER_DESTINATION="$3"

 local LOCAL_CTIME_SOURCE

 LOCAL_CTIME_SOURCE=$(/usr/bin/stat -c "%Z" "$LOCAL_FOLDER_SOURCE/$LOCAL_FILENAME_SOURCE")

 /bin/cp -av "$LOCAL_FOLDER_SOURCE/$LOCAL_FILENAME_SOURCE" "$LOCAL_FOLDER_DESTINATION"
 /usr/bin/setfattr -n "user.kbcom.net:ctime" -v "$LOCAL_CTIME_SOURCE" "$LOCAL_FOLDER_DESTINATION/$LOCAL_FILENAME_SOURCE"
}

copy_tree()
{
# New tree creation
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FOLDER_DESTINATION="$2"

 local LOCAL_ENTRYARRAY_SOURCEFOLDER
 local LOCAL_ENTRY_SOURCEFOLDER

 cd "$LOCAL_FOLDER_SOURCE"
 LOCAL_ENTRYARRAY_SOURCEFOLDER=(*)

 IFS=$'\n'
 for LOCAL_ENTRY_SOURCEFOLDER in ${LOCAL_ENTRYARRAY_SOURCEFOLDER[@]}
 do
  if [ -d "$LOCAL_FOLDER_SOURCE/$LOCAL_ENTRY_SOURCEFOLDER" ]
  then
   /bin/mkdir "$LOCAL_FOLDER_DESTINATION/$LOCAL_ENTRY_SOURCEFOLDER"
   copy_folderattribute "$LOCAL_FOLDER_SOURCE/$LOCAL_ENTRY_SOURCEFOLDER" "$LOCAL_FOLDER_DESTINATION/$LOCAL_ENTRY_SOURCEFOLDER"
   copy_tree "$LOCAL_FOLDER_SOURCE/$LOCAL_ENTRY_SOURCEFOLDER" "$LOCAL_FOLDER_DESTINATION/$LOCAL_ENTRY_SOURCEFOLDER"
  else
   copy_file "$LOCAL_FOLDER_SOURCE" "$LOCAL_ENTRY_SOURCEFOLDER" "$LOCAL_FOLDER_DESTINATION"
  fi
 done
}

backupcopy_file()
{
# Overwrite file
 local LOCAL_FILE_SOURCE="$1"
 local LOCAL_FILE_DESTINATION="$2"
 local LOCAL_FOLDER_BACKUP="$3"

 copy_parentfolders "$LOCAL_FOLDER_BACKUP" "$GLOBAL_FOLDER_SOURCE" "$LOCAL_FILE_SOURCE"
 move_tree "$GLOBAL_FOLDER_DESTINATION" "$LOCAL_FILE_DESTINATION" "$LOCAL_FOLDER_BACKUP"
 copy_file "$LOCAL_FILE_SOURCE" "$LOCAL_FILE_DESTINATION"
}

backupdelete_file()
{
# Delete file
 local LOCAL_FILE_DESTINATION="$1"
 local LOCAL_FOLDER_BACKUP="$2"

 copy_parentfolders "$LOCAL_FOLDER_BACKUP" "$GLOBAL_FOLDER_DESTINATION" "$LOCAL_FILE_DESTINATION"
 move_tree "$GLOBAL_FOLDER_DESTINATION" "$LOCAL_FILE_DESTINATION" "$LOCAL_FOLDER_BACKUP"
}

backupdelete_tree()
{
# Delete tree
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FOLDER_BACKUP="$2"

 copy_parentfolders "$LOCAL_FOLDER_BACKUP" "$GLOBAL_FOLDER_DESTINATION" "$LOCAL_FOLDER_DESTINATION"
 move_tree "$GLOBAL_FOLDER_DESTINATION" "$LOCAL_FOLDER_DESTINATION" "$LOCAL_FOLDER_BACKUP"
}

scan_folder()
{
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FOLDER_DESTINATION="$2"

 local LOCAL_ENTRYARRAY_DESTINATIONFOLDER
 local LOCAL_ENTRYARRAY_SOURCEFOLDER
 local LOCAL_COUNTER_SOURCEFOLDER
 local LOCAL_COUNTER_DESTINATIONFOLDER

 local LOCAL_CTIME_SOURCE
 local LOCAL_CTIME_DESTINATION
 local LOCAL_STAT_SOURCE
 local LOCAL_STAT_DESTINATION
 local LOCAL_ACL_SOURCE
 local LOCAL_ACL_DESTINATION

 local LOCAL_BOOLEAN_EQUAL=true

 cd "$LOCAL_FOLDER_DESTINATION"
 LOCAL_ENTRYARRAY_DESTINATIONFOLDER=(*)

 cd "$LOCAL_FOLDER_SOURCE"
 LOCAL_ENTRYARRAY_SOURCEFOLDER=(*)

 LOCAL_COUNTER_SOURCEFOLDER=0
 LOCAL_COUNTER_DESTINATIONFOLDER=0

 if [ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" == "*" ]
 then
  LOCAL_COUNTER_SOURCEFOLDER=1
 fi

 if [ "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" == "*" ]
 then
  LOCAL_COUNTER_DESTINATIONFOLDER=1
 fi

 while true
 do
  if [ ${#LOCAL_ENTRYARRAY_SOURCEFOLDER[*]} -le $LOCAL_COUNTER_SOURCEFOLDER -a ${#LOCAL_ENTRYARRAY_DESTINATIONFOLDER[*]} -le $LOCAL_COUNTER_DESTINATIONFOLDER ]
  then
   break
  elif [ ${#LOCAL_ENTRYARRAY_SOURCEFOLDER[*]} -le $LOCAL_COUNTER_SOURCEFOLDER ]
  then

   # Deleted file or folder
   if [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    echo "Fájl könyvtár: ${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]} ($LOCAL_COUNTER_SOURCEFOLDER, $LOCAL_COUNTER_DESTINATIONFOLDER)"
   else
    echo "Fájl törlése: ${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]} ($LOCAL_COUNTER_SOURCEFOLDER, $LOCAL_COUNTER_DESTINATIONFOLDER)"
   fi

   ((LOCAL_COUNTER_DESTINATIONFOLDER++))

  elif [ ${#LOCAL_ENTRYARRAY_DESTINATIONFOLDER[*]} -le $LOCAL_COUNTER_DESTINATIONFOLDER ]
  then

   # New file or folder
   if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ]
   then
    echo "Copy tree \"$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\" \"$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\""
    /bin/mkdir "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    copy_folderattribute "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    copy_tree "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
   else
    copy_file "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
   fi

   ((LOCAL_COUNTER_SOURCEFOLDER++))

  else

   if [ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" == "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    LOCAL_BOOLEAN_EQUAL=true

   if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ] && [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    LOCAL_STAT_SOURCE=$(/usr/bin/stat -c "%a%u%g%Y" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
    LOCAL_STAT_DESTINATION=$(/usr/bin/stat -c "%a%u%g%Y" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

    if [ "$LOCAL_STAT_SOURCE" != "$LOCAL_STAT_DESTINATION" ]
    then
     LOCAL_BOOLEAN_EQUAL=false
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_ACL_SOURCE=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_ACL_DESTINATION=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_ACL_SOURCE" != "$LOCAL_ACL_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = false ]
    then
     copy_folderattribute "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
    fi

    scan_folder "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"

   elif [ ! -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ] && [ ! -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    LOCAL_BOOLEAN_EQUAL=true

    LOCAL_STAT_SOURCE=$(/usr/bin/stat -c "%a%u%g%s%Y" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
    LOCAL_STAT_DESTINATION=$(/usr/bin/stat -c "%a%u%g%s%Y" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

    if [ "$LOCAL_STAT_SOURCE" != "$LOCAL_STAT_DESTINATION" ]
    then
     LOCAL_BOOLEAN_EQUAL=false
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_CTIME_SOURCE=$(/usr/bin/stat -c "%Z" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_CTIME_DESTINATION=$(/usr/bin/getfattr --absolute-names --only-values -n "user.kbcom.net:ctime" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_CTIME_SOURCE" != "$LOCAL_CTIME_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_ACL_SOURCE=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_ACL_DESTINATION=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_ACL_SOURCE" != "$LOCAL_ACL_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = false ]
    then
     copy_file "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
    fi

   else
    echo "Nem ugyanaz a típus: ${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
   fi

    ((LOCAL_COUNTER_SOURCEFOLDER++))
    ((LOCAL_COUNTER_DESTINATIONFOLDER++))

   elif [[ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" < "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]]
   then

   # New file or folder
    if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ]
    then
     echo "Copy tree \"$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\" \"$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\""
     /bin/mkdir "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
     copy_folderattribute "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
     copy_tree "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    else
     copy_file "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
    fi

    ((LOCAL_COUNTER_SOURCEFOLDER++))
   else

    # Deleted file or folder
    if [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
    then
     echo "Könyvtár törlése: ${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]} ($LOCAL_COUNTER_SOURCEFOLDER, $LOCAL_COUNTER_DESTINATIONFOLDER)"
    else
     echo "Fájl törlése: ${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]} ($LOCAL_COUNTER_SOURCEFOLDER, $LOCAL_COUNTER_DESTINATIONFOLDER)"
    fi

    ((LOCAL_COUNTER_DESTINATIONFOLDER++))
   fi

  fi
 done
}
