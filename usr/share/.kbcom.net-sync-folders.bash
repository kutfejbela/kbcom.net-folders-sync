#!/bin/bash

declare -a GLOBAL_CODES_ERROR

GLOBAL_CODES_ERROR[10]="Source folder does not exist"
GLOBAL_CODES_ERROR[11]="Source folder is not a folder"
GLOBAL_CODES_ERROR[20]="Destination folder does not exist"
GLOBAL_CODES_ERROR[21]="Destination folder is not a folder"
GLOBAL_CODES_ERROR[30]="Backup folder does not exist"
GLOBAL_CODES_ERROR[31]="Backup folder is not a folder"
GLOBAL_CODES_ERROR[32]="Error generating backup subfolder name (cannot get system time)"
GLOBAL_CODES_ERROR[33]="Error when creating the backup subfolder"
GLOBAL_CODES_ERROR[34]="Error when backup(move) a file"
GLOBAL_CODES_ERROR[35]="Error when backup(move) a tree"
GLOBAL_CODES_ERROR[36]="Backup destination does exists and it is not a folder"

### Make backup root
### Copy subfolder
### Build vanish check

error_show()
{
 local LOCAL_CODE_ERROR="$1"

 echo "${GLOBAL_CODES_ERROR[$LOCAL_CODE_ERROR]}!"

 if [ "$CONFIG_EXITONERROR" == "yes" ]
 then
  echo "Stop syncing!"
  exit $LOCAL_CODE_ERROR
 fi
}

error_showexit()
{
 local LOCAL_CODE_ERROR="$1"

 echo "${GLOBAL_CODES_ERROR[$LOCAL_CODE_ERROR]}!"
 echo "Stop syncing!"
 exit $LOCAL_CODE_ERROR
}

backup_checkcreate_backupfolder()
{
 local LOCAL_DATETIME_NOW

 if [ ! -x "$CONFIG_ROOTFOLDER_BACKUP" ]
 then
  error_showexit 30
 fi

 if [ ! -d "$CONFIG_ROOTFOLDER_BACKUP" ]
 then
  error_showexit 31
 fi

 LOCAL_DATETIME_NOW=$(/bin/date +%Y%m%d%H%M%S)

 if [ "${#LOCAL_DATETIME_NOW}" -ne 14 ]
 then
  error_showexit 32
 fi

 GLOBAL_ROOTFOLDER_BACKUP="$CONFIG_ROOTFOLDER_BACKUP/${LOCAL_DATETIME_NOW:0:6}/${LOCAL_DATETIME_NOW:0:8}/$LOCAL_DATETIME_NOW"

 /bin/mkdir -p "$GLOBAL_ROOTFOLDER_BACKUP"

 if [ "$?" -ne 0 ]
 then
  error_showexit 33
 fi
}

backup_copy_parentfolders()
{
# check not vanished
 local LOCAL_ROOTFOLDER_COPYFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_SUBFOLDER_COPYFROM="$1"
 local LOCAL_ROOTFOLDER_COPYTO="$GLOBAL_ROOTFOLDER_BACKUP"

 local LOCAL_SUBFOLDER_COPYREST
 local LOCAL_SUBFOLDER_COPYNEXT
 local LOCAL_SUBFOLDER_COPYNOW

 if [ -x "${LOCAL_ROOTFOLDER_COPYTO}${LOCAL_SUBFOLDER_COPYFROM}" ]
 then
  if [ ! -d "${LOCAL_ROOTFOLDER_COPYTO}${LOCAL_SUBFOLDER_COPYFROM}" ]
  then
    error_showexit 36
  else
   return
  fi
 fi

 LOCAL_SUBFOLDER_COPYREST="$LOCAL_SUBFOLDER_COPYFROM"
 LOCAL_SUBFOLDER_COPYNEXT=${LOCAL_SUBFOLDER_COPYREST%/*}
 LOCAL_SUBFOLDER_COPYNOW=""


 while [ "$LOCAL_SUBFOLDER_COPYNEXT" != "" ]
 do
  LOCAL_SUBFOLDER_COPYNOW="${LOCAL_SUBFOLDER_COPYNOW}${LOCAL_SUBFOLDER_COPYNEXT}"

  /bin/mkdir "$LOCAL_ROOTFOLDER_COPYTO/$LOCAL_SUBFOLDER_COPYNOW"
  sync_copy_folderattribute "$LOCAL_ROOTFOLDER_COPYFROM/$LOCAL_SUBFOLDER_COPYNOW" "$LOCAL_ROOTFOLDER_COPYTO/$LOCAL_SUBFOLDER_COPYNOW"

  LOCAL_SUBFOLDER_COPYREST="${LOCAL_SUBFOLDER_COPYREST:${#LOCAL_SUBFOLDER_COPYNEXT}}"
  LOCAL_SUBFOLDER_COPYNEXT=${LOCAL_SUBFOLDER_COPYREST%/*}
 done

 /bin/mkdir "${LOCAL_ROOTFOLDER_COPYTO}${LOCAL_SUBFOLDER_COPYFROM}"
 sync_copy_folderattribute "${LOCAL_ROOTFOLDER_COPYFROM}${LOCAL_SUBFOLDER_COPYFROM}" "${LOCAL_ROOTFOLDER_COPYTO}${LOCAL_SUBFOLDER_COPYFROM}"
}

backup_move_file()
{
 # Backup file
 local LOCAL_FOLDER_MOVEFROM="$1"
 local LOCAL_FOLDER_MOVETO="$2"

 /bin/mv "$LOCAL_FOLDER_MOVEFROM" "$LOCAL_FOLDER_MOVETO"

 if [ $? -ne 0 ]
 then
  error_showexit 34
 fi
}

backup_move_tree()
{
 # Backup tree
 local LOCAL_FOLDER_MOVEFROM="$1"
 local LOCAL_FOLDER_MOVETO="$2"

 /bin/mv "$LOCAL_FOLDER_MOVEFROM" "$LOCAL_FOLDER_MOVETO"

 if [ $? -ne 0 ]
 then
  error_showexit 34
 fi
}

sync_copy_folderattribute()
{
 # Copy folder attributes
 local LOCAL_FOLDER_COPYFROM="$1"
 local LOCAL_FOLDER_COPYTO="$2"

 /bin/touch --reference="$LOCAL_FOLDER_COPYFROM" "$LOCAL_FOLDER_COPYTO"
 /bin/chmod --reference="$LOCAL_FOLDER_COPYFROM" "$LOCAL_FOLDER_COPYTO"
 /bin/chown --reference="$LOCAL_FOLDER_COPYFROM" "$LOCAL_FOLDER_COPYTO"
 /usr/bin/getfacl -p "$LOCAL_FOLDER_COPYFROM" | /usr/bin/setfacl --set-file=- "$LOCAL_FOLDER_COPYTO"
}

sync_copy_file()
{
 # New file creation
 local LOCAL_FOLDER_COPYFROM="$1"
 local LOCAL_FILENAME_SOURCE="$2"
 local LOCAL_FOLDER_COPYTO="$3"

 local LOCAL_CTIME_SOURCE

 LOCAL_CTIME_SOURCE=$(/usr/bin/stat -c "%Z" "$LOCAL_FOLDER_COPYFROM/$LOCAL_FILENAME_SOURCE")

 /bin/cp -av "$LOCAL_FOLDER_COPYFROM/$LOCAL_FILENAME_SOURCE" "$LOCAL_FOLDER_COPYTO"
 /usr/bin/setfattr -n "user.kbcom.net:ctime" -v "$LOCAL_CTIME_SOURCE" "$LOCAL_FOLDER_COPYTO/$LOCAL_FILENAME_SOURCE"
}

sync_copy_tree()
{
 # New tree creation
 local LOCAL_FOLDER_COPYFROM="$1"
 local LOCAL_FOLDER_COPYTO="$2"

 local LOCAL_ENTRYARRAY_SOURCEFOLDER
 local LOCAL_ENTRY_SOURCEFOLDER

 cd "$LOCAL_FOLDER_COPYFROM"
 LOCAL_ENTRYARRAY_SOURCEFOLDER=(*)

 IFS=$'\n'
 for LOCAL_ENTRY_SOURCEFOLDER in ${LOCAL_ENTRYARRAY_SOURCEFOLDER[@]}
 do
  # If folder empty
  if [ "$LOCAL_ENTRY_SOURCEFOLDER" == "*" ]
  then
   break
  fi

  if [ -d "$LOCAL_FOLDER_COPYFROM/$LOCAL_ENTRY_SOURCEFOLDER" ]
  then
   /bin/mkdir "$LOCAL_FOLDER_COPYTO/$LOCAL_ENTRY_SOURCEFOLDER"
   sync_copy_folderattribute "$LOCAL_FOLDER_COPYFROM/$LOCAL_ENTRY_SOURCEFOLDER" "$LOCAL_FOLDER_COPYTO/$LOCAL_ENTRY_SOURCEFOLDER"
   sync_copy_tree "$LOCAL_FOLDER_COPYFROM/$LOCAL_ENTRY_SOURCEFOLDER" "$LOCAL_FOLDER_COPYTO/$LOCAL_ENTRY_SOURCEFOLDER"
  else
   sync_copy_file "$LOCAL_FOLDER_COPYFROM" "$LOCAL_ENTRY_SOURCEFOLDER" "$LOCAL_FOLDER_COPYTO"
  fi
 done
}

backupcopy_file()
{
 # Overwrite file
 local LOCAL_FILE_SOURCE="$1"
 local LOCAL_FILE_DESTINATION="$2"
 local LOCAL_FOLDER_BACKUP="$3"

 copy_parentfolders "$LOCAL_FOLDER_BACKUP" "$GLOBAL_FOLDER_SOURCE" "$LOCAL_FILE_SOURCE"
 move_tree "$GLOBAL_FOLDER_DESTINATION" "$LOCAL_FILE_DESTINATION" "$LOCAL_FOLDER_BACKUP"
 sync_copy_file "$LOCAL_FILE_SOURCE" "$LOCAL_FILE_DESTINATION"
}

backupdelete_file()
{
 # Backup and delete a file (move)
 local LOCAL_ROOTFOLDER_BACKUPFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_PARENTFOLDER_BACKUPFROM="$1"
 local LOCAL_FILE_BACKUPFROM="$2"
 local LOCAL_ROOTFOLDER_BACKUPTO="$GLOBAL_ROOTFOLDER_BACKUP"

 LOCAL_SUBFOLDER_BACKUPFROM="${LOCAL_PARENTFOLDER_BACKUPFROM:${#LOCAL_ROOTFOLDER_BACKUPFROM}}"

 echo "Backup and delete(move) file: $LOCAL_SUBFOLDER_BACKUPFROM/$LOCAL_FILE_BACKUPFROM"

 if [ ! -z "$LOCAL_SUBFOLDER_BACKUPFROM" ]
 then
  backup_copy_parentfolders "$LOCAL_SUBFOLDER_BACKUPFROM"
 fi

 backup_move_file "$LOCAL_PARENTFOLDER_BACKUPFROM/$LOCAL_FILE_BACKUPFROM" "${LOCAL_ROOTFOLDER_BACKUPTO}${LOCAL_SUBFOLDER_BACKUPFROM}"
}

backupdelete_tree()
{
 # Backup and delete a tree (move)
 local LOCAL_ROOTFOLDER_BACKUPFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_PARENTFOLDER_BACKUPFROM="$1"
 local LOCAL_FOLDER_BACKUPFROM="$2"
 local LOCAL_ROOTFOLDER_BACKUPTO="$GLOBAL_ROOTFOLDER_BACKUP"


 LOCAL_SUBFOLDER_BACKUPFROM="${LOCAL_PARENTFOLDER_BACKUPFROM:${#LOCAL_ROOTFOLDER_BACKUPFROM}}"

 echo "Backup and delete(move) tree: $LOCAL_SUBFOLDER_BACKUPFROM/$LOCAL_FOLDER_BACKUPFROM"

 if [ ! -z "$LOCAL_SUBFOLDER_BACKUPFROM" ]
 then
  backup_copy_parentfolders "$LOCAL_SUBFOLDER_BACKUPFROM"
 fi

 backup_move_tree "$LOCAL_PARENTFOLDER_BACKUPFROM/$LOCAL_FOLDER_BACKUPFROM" "${LOCAL_ROOTFOLDER_BACKUPTO}${LOCAL_SUBFOLDER_BACKUPFROM}"
}

scan_folder()
{
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FOLDER_DESTINATION="$2"

 local LOCAL_ENTRYARRAY_DESTINATIONFOLDER
 local LOCAL_ENTRYARRAY_SOURCEFOLDER
 local LOCAL_COUNTER_SOURCEFOLDER
 local LOCAL_COUNTER_DESTINATIONFOLDER

 local LOCAL_CTIME_SOURCE
 local LOCAL_CTIME_DESTINATION
 local LOCAL_STAT_SOURCE
 local LOCAL_STAT_DESTINATION
 local LOCAL_ACL_SOURCE
 local LOCAL_ACL_DESTINATION

 local LOCAL_BOOLEAN_EQUAL=true

 cd "$LOCAL_FOLDER_DESTINATION"
 LOCAL_ENTRYARRAY_DESTINATIONFOLDER=(*)

 cd "$LOCAL_FOLDER_SOURCE"
 LOCAL_ENTRYARRAY_SOURCEFOLDER=(*)

 LOCAL_COUNTER_SOURCEFOLDER=0
 LOCAL_COUNTER_DESTINATIONFOLDER=0

 # If folders are empty
 if [ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" == "*" ]
 then
  LOCAL_COUNTER_SOURCEFOLDER=1
 fi

 if [ "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" == "*" ]
 then
  LOCAL_COUNTER_DESTINATIONFOLDER=1
 fi

 while true
 do
  if [ ${#LOCAL_ENTRYARRAY_SOURCEFOLDER[*]} -le $LOCAL_COUNTER_SOURCEFOLDER -a ${#LOCAL_ENTRYARRAY_DESTINATIONFOLDER[*]} -le $LOCAL_COUNTER_DESTINATIONFOLDER ]
  then
   ### Reaches the end of both arrays
   break

  elif [ ${#LOCAL_ENTRYARRAY_SOURCEFOLDER[*]} -le $LOCAL_COUNTER_SOURCEFOLDER ]
  then
   ### Reaches the end of the source array

   # Backup and delete file or tree
   if [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    backupdelete_tree "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
   else
    backupdelete_file "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
   fi

   ((LOCAL_COUNTER_DESTINATIONFOLDER++))

  elif [ ${#LOCAL_ENTRYARRAY_DESTINATIONFOLDER[*]} -le $LOCAL_COUNTER_DESTINATIONFOLDER ]
  then
   ### Reaches the end of the destination array

   # Create new file or tree
   if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ]
   then
    echo "Copy tree \"$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\" \"$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\""
    /bin/mkdir "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    sync_copy_folderattribute "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    sync_copy_tree "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
   else
    sync_copy_file "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
   fi

   ((LOCAL_COUNTER_SOURCEFOLDER++))

  else

   if [ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" == "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    LOCAL_BOOLEAN_EQUAL=true

    if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ] && [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
    then
     LOCAL_STAT_SOURCE=$(/usr/bin/stat -c "%a%u%g%Y" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_STAT_DESTINATION=$(/usr/bin/stat -c "%a%u%g%Y" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_STAT_SOURCE" != "$LOCAL_STAT_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi

     if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
     then
      LOCAL_ACL_SOURCE=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
      LOCAL_ACL_DESTINATION=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

      if [ "$LOCAL_ACL_SOURCE" != "$LOCAL_ACL_DESTINATION" ]
      then
       LOCAL_BOOLEAN_EQUAL=false
      fi
     fi

     if [ "$LOCAL_BOOLEAN_EQUAL" = false ]
     then
      sync_copy_folderattribute "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
     fi

     scan_folder "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"

   elif [ ! -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ] && [ ! -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    LOCAL_BOOLEAN_EQUAL=true

    LOCAL_STAT_SOURCE=$(/usr/bin/stat -c "%a%u%g%s%Y" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
    LOCAL_STAT_DESTINATION=$(/usr/bin/stat -c "%a%u%g%s%Y" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

    if [ "$LOCAL_STAT_SOURCE" != "$LOCAL_STAT_DESTINATION" ]
    then
     LOCAL_BOOLEAN_EQUAL=false
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_CTIME_SOURCE=$(/usr/bin/stat -c "%Z" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_CTIME_DESTINATION=$(/usr/bin/getfattr --absolute-names --only-values -n "user.kbcom.net:ctime" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_CTIME_SOURCE" != "$LOCAL_CTIME_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_ACL_SOURCE=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_ACL_DESTINATION=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_ACL_SOURCE" != "$LOCAL_ACL_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = false ]
    then
     sync_copy_file "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
    fi

   else
    echo "Nem ugyanaz a típus: ${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
   fi

    ((LOCAL_COUNTER_SOURCEFOLDER++))
    ((LOCAL_COUNTER_DESTINATIONFOLDER++))

   elif [[ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" < "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]]
   then
    ### Missing from destination list

    # Create new file or tree
    if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ]
    then
     echo "Copy tree \"$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\" \"$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\""
     /bin/mkdir "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
     sync_copy_folderattribute "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
     sync_copy_tree "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    else
     sync_copy_file "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
    fi

    ((LOCAL_COUNTER_SOURCEFOLDER++))
   else
    ### Missing from source list

    # Backup and delete file or tree
    if [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
    then
     backupdelete_tree "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
    else
     backupdelete_file "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
    fi

    ((LOCAL_COUNTER_DESTINATIONFOLDER++))
   fi

  fi
 done
}
