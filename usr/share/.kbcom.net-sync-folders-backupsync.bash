#!/bin/bash

sync_file()
{
}

sync_tree()
{
}

backupsync_file()
{
 # Backup and overwrite a file (move and copy)
 local LOCAL_ROOTFOLDER_SYNCFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_PARENTFOLDER_SYNCFROM="$1"
 local LOCAL_FILE_SYNCFROM="$2"
 local LOCAL_ROOTFOLDER_BACKUPFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_ROOTFOLDER_BACKUPTO="$GLOBAL_ROOTFOLDER_BACKUP"

 LOCAL_SUBFOLDER_SYNCFROM="${LOCAL_PARENTFOLDER_SYNCFROM:${#LOCAL_ROOTFOLDER_SYNCFROM}}"

 echo "Backup and overwrite(move and copy) file: $LOCAL_SUBFOLDER_SYNCFROM/$LOCAL_FILE_SYNCFROM"

 if [ ! -z "$LOCAL_SUBFOLDER_SYNCFROM" ]
 then
  backup_copy_parentfolders "$LOCAL_SUBFOLDER_SYNCFROM"
 fi

 filesystem_movefile "$LOCAL_PARENTFOLDER_BACKUPFROM" "$LOCAL_FILE_SYNCFROM" "${LOCAL_ROOTFOLDER_BACKUPTO}${LOCAL_SUBFOLDER_SYNCFROM}"
 filesystem_copyfile "$LOCAL_PARENTFOLDER_SYNCFROM" "$LOCAL_FILE_SYNCFROM" "${LOCAL_ROOTFOLDER_BACKUPFROM}${LOCAL_SUBFOLDER_SYNCFROM}"
}

backupsync_tree()
{
 # Backup and overwrite a file (move and copy)
 local LOCAL_ROOTFOLDER_SYNCFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_PARENTFOLDER_SYNCFROM="$1"
 local LOCAL_FOLDER_SYNCFROM="$2"
 local LOCAL_ROOTFOLDER_BACKUPFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_ROOTFOLDER_BACKUPTO="$GLOBAL_ROOTFOLDER_BACKUP"

 LOCAL_SUBFOLDER_SYNCFROM="${LOCAL_PARENTFOLDER_SYNCFROM:${#LOCAL_ROOTFOLDER_SYNCFROM}}"

 echo "Backup and overwrite(move and copy) tree: $LOCAL_SUBFOLDER_SYNCFROM/$LOCAL_FOLDER_SYNCFROM"

 if [ ! -z "$LOCAL_SUBFOLDER_SYNCFROM" ]
 then
  backup_copy_parentfolders "$LOCAL_SUBFOLDER_SYNCFROM"
 fi

 filesystem_movetree "$LOCAL_PARENTFOLDER_BACKUPFROM" "$LOCAL_FOLDER_SYNCFROM" "${LOCAL_ROOTFOLDER_BACKUPTO}${LOCAL_SUBFOLDER_SYNCFROM}"
 filesystem_copytree "$LOCAL_PARENTFOLDER_SYNCFROM" "$LOCAL_FOLDER_SYNCFROM" "${LOCAL_ROOTFOLDER_BACKUPFROM}${LOCAL_SUBFOLDER_SYNCFROM}"
}

backupdelete_file()
{
 # Backup and overwrite a file (move and copy)
 local LOCAL_ROOTFOLDER_BACKUPFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_PARENTFOLDER_BACKUPFROM="$1"
 local LOCAL_FILE_BACKUPFROM="$2"
 local LOCAL_ROOTFOLDER_BACKUPTO="$GLOBAL_ROOTFOLDER_BACKUP"

 LOCAL_SUBFOLDER_BACKUPFROM="${LOCAL_PARENTFOLDER_BACKUPFROM:${#LOCAL_ROOTFOLDER_BACKUPFROM}}"

 echo "Backup and delete(move) file: $LOCAL_SUBFOLDER_BACKUPFROM/$LOCAL_FILE_BACKUPFROM"

 if [ ! -z "$LOCAL_SUBFOLDER_BACKUPFROM" ]
 then
  backup_copy_parentfolders "$LOCAL_SUBFOLDER_BACKUPFROM"
 fi

 filesystem_movefile "$LOCAL_PARENTFOLDER_BACKUPFROM" "$LOCAL_FILE_BACKUPFROM" "${LOCAL_ROOTFOLDER_BACKUPTO}${LOCAL_SUBFOLDER_BACKUPFROM}"
}

backupdelete_tree()
{
 # Backup and delete a tree (move)
 local LOCAL_ROOTFOLDER_BACKUPFROM="$CONFIG_ROOTFOLDER_DESTINATION"
 local LOCAL_PARENTFOLDER_BACKUPFROM="$1"
 local LOCAL_FOLDER_BACKUPFROM="$2"
 local LOCAL_ROOTFOLDER_BACKUPTO="$GLOBAL_ROOTFOLDER_BACKUP"


 LOCAL_SUBFOLDER_BACKUPFROM="${LOCAL_PARENTFOLDER_BACKUPFROM:${#LOCAL_ROOTFOLDER_BACKUPFROM}}"

 echo "Backup and delete(move) tree: $LOCAL_SUBFOLDER_BACKUPFROM/$LOCAL_FOLDER_BACKUPFROM"

 if [ ! -z "$LOCAL_SUBFOLDER_BACKUPFROM" ]
 then
  backup_copy_parentfolders "$LOCAL_SUBFOLDER_BACKUPFROM"
 fi

 filesystem_movetree "$LOCAL_PARENTFOLDER_BACKUPFROM" "$LOCAL_FOLDER_BACKUPFROM" "${LOCAL_ROOTFOLDER_BACKUPTO}${LOCAL_SUBFOLDER_BACKUPFROM}"
}

scan_folder()
{
 local LOCAL_FOLDER_SOURCE="$1"
 local LOCAL_FOLDER_DESTINATION="$2"

 local LOCAL_ENTRYARRAY_DESTINATIONFOLDER
 local LOCAL_ENTRYARRAY_SOURCEFOLDER
 local LOCAL_COUNTER_SOURCEFOLDER
 local LOCAL_COUNTER_DESTINATIONFOLDER

 local LOCAL_CTIME_SOURCE
 local LOCAL_CTIME_DESTINATION
 local LOCAL_STAT_SOURCE
 local LOCAL_STAT_DESTINATION
 local LOCAL_ACL_SOURCE
 local LOCAL_ACL_DESTINATION

 local LOCAL_BOOLEAN_EQUAL=true

 cd "$LOCAL_FOLDER_DESTINATION"
 LOCAL_ENTRYARRAY_DESTINATIONFOLDER=(*)

 cd "$LOCAL_FOLDER_SOURCE"
 LOCAL_ENTRYARRAY_SOURCEFOLDER=(*)

 LOCAL_COUNTER_SOURCEFOLDER=0
 LOCAL_COUNTER_DESTINATIONFOLDER=0

 # If folders are empty
 if [ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" == "*" ]
 then
  LOCAL_COUNTER_SOURCEFOLDER=1
 fi

 if [ "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" == "*" ]
 then
  LOCAL_COUNTER_DESTINATIONFOLDER=1
 fi

 while true
 do
  if [ ${#LOCAL_ENTRYARRAY_SOURCEFOLDER[*]} -le $LOCAL_COUNTER_SOURCEFOLDER -a ${#LOCAL_ENTRYARRAY_DESTINATIONFOLDER[*]} -le $LOCAL_COUNTER_DESTINATIONFOLDER ]
  then
   ### Reaches the end of both arrays
   break

  elif [ ${#LOCAL_ENTRYARRAY_SOURCEFOLDER[*]} -le $LOCAL_COUNTER_SOURCEFOLDER ]
  then
   ### Reaches the end of the source array

   # Backup and delete file or tree
   if [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    backupdelete_tree "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
   else
    backupdelete_file "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
   fi

   ((LOCAL_COUNTER_DESTINATIONFOLDER++))

  elif [ ${#LOCAL_ENTRYARRAY_DESTINATIONFOLDER[*]} -le $LOCAL_COUNTER_DESTINATIONFOLDER ]
  then
   ### Reaches the end of the destination array

   # Create new file or tree
   if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ]
   then
    echo "Copy tree \"$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\" \"$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\""
    /bin/mkdir "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    filesystem_copyfolderattributes "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    filesystem_copytree "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
   else
    filesystem_copyfile "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
   fi

   ((LOCAL_COUNTER_SOURCEFOLDER++))

  else

   if [ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" == "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    ### Entry appear both array
    LOCAL_BOOLEAN_EQUAL=true

    if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ] && [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
    then
     ### Both entry are folder
     LOCAL_STAT_SOURCE=$(/usr/bin/stat -c "%a%u%g%Y" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_STAT_DESTINATION=$(/usr/bin/stat -c "%a%u%g%Y" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_STAT_SOURCE" != "$LOCAL_STAT_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi

     if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
     then
      LOCAL_ACL_SOURCE=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
      LOCAL_ACL_DESTINATION=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

      if [ "$LOCAL_ACL_SOURCE" != "$LOCAL_ACL_DESTINATION" ]
      then
       LOCAL_BOOLEAN_EQUAL=false
      fi
     fi

     if [ "$LOCAL_BOOLEAN_EQUAL" = false ]
     then
      filesystem_copyfolderattributes "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
     fi

     scan_folder "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"

   elif [ ! -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ] && [ ! -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
   then
    LOCAL_BOOLEAN_EQUAL=true

    LOCAL_STAT_SOURCE=$(/usr/bin/stat -c "%a%u%g%s%Y" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
    LOCAL_STAT_DESTINATION=$(/usr/bin/stat -c "%a%u%g%s%Y" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

    if [ "$LOCAL_STAT_SOURCE" != "$LOCAL_STAT_DESTINATION" ]
    then
     LOCAL_BOOLEAN_EQUAL=false
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_CTIME_SOURCE=$(/usr/bin/stat -c "%Z" "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_CTIME_DESTINATION=$(/usr/bin/getfattr --absolute-names --only-values -n "user.kbcom.net:ctime" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_CTIME_SOURCE" != "$LOCAL_CTIME_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = true ]
    then
     LOCAL_ACL_SOURCE=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}")
     LOCAL_ACL_DESTINATION=$(/usr/bin/getfacl -cp "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}")

     if [ "$LOCAL_ACL_SOURCE" != "$LOCAL_ACL_DESTINATION" ]
     then
      LOCAL_BOOLEAN_EQUAL=false
     fi
    fi

    if [ "$LOCAL_BOOLEAN_EQUAL" = false ]
    then
     filesystem_copyfile "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
    fi

   else
    echo "Nem ugyanaz a t√≠pus: ${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
   fi

    ((LOCAL_COUNTER_SOURCEFOLDER++))
    ((LOCAL_COUNTER_DESTINATIONFOLDER++))

   elif [[ "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" < "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]]
   then
    ### Missing from destination list

    # Create new file or tree
    if [ -d "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" ]
    then
     echo "Copy tree \"$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\" \"$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}\""
     /bin/mkdir "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
     filesystem_copyfolderattributes "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
     filesystem_copytree "$LOCAL_FOLDER_SOURCE/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}"
    else
     filesystem_copyfile "$LOCAL_FOLDER_SOURCE" "${LOCAL_ENTRYARRAY_SOURCEFOLDER[LOCAL_COUNTER_SOURCEFOLDER]}" "$LOCAL_FOLDER_DESTINATION"
    fi

    ((LOCAL_COUNTER_SOURCEFOLDER++))
   else
    ### Missing from source list

    # Backup and delete file or tree
    if [ -d "$LOCAL_FOLDER_DESTINATION/${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}" ]
    then
     backupdelete_tree "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
    else
     backupdelete_file "$LOCAL_FOLDER_DESTINATION" "${LOCAL_ENTRYARRAY_DESTINATIONFOLDER[LOCAL_COUNTER_DESTINATIONFOLDER]}"
    fi

    ((LOCAL_COUNTER_DESTINATIONFOLDER++))
   fi

  fi
 done
}
